dnl Process this file with autoconf to produce a configure script.
AC_INIT([pmacctd.c], [0.7.4], [paolo.lucente@ic.cnr.it])
AM_INIT_AUTOMAKE([pmacctd], [0.7.4])
AC_PREFIX_DEFAULT([/usr/local])

dnl Checks for programs.
AC_PROG_CC
host_os=`uname`

dnl initial checks; tweakings to CFLAGS and LDFLAGS
dnl see final checks for tweakings to LIBS
if test "x$ac_cv_prog_gcc" = xyes ; then
  CFLAGS="-O2"
  case "$host_os" in
    IRIX*)
      CFLAGS="-mabi=n32 -fno-builtins ${CFLAGS}"
      LDFLAGS="-mabi=n32 -Wl,-rpath,/usr/lib32 ${LDFLAGS}"
      ;;
  esac
else
  case "$host_os" in
    IRIX*)
      CFLAGS="-O2 -I/usr/freeware/include ${CFLAGS}"
      LDFLAGS="-n32 -L/usr/lib32 -L/usr/freeware/lib32 ${LDFLAGS}"
      ;;
    OSF*)
      CFLAGS="-O -assume noaligned_objects"
      ;;
  esac
fi

dnl set debug level
AC_MSG_CHECKING([whether to enable debugging compiler options])
AC_ARG_ENABLE(debug,
	[  --enable-debug                   enable debugging compiler options],
	AC_MSG_RESULT(yes)
	tmp_CFLAGS=`echo $CFLAGS | sed 's/O2/O0/g'`
	CFLAGS="$tmp_CFLAGS"
  	CFLAGS="$CFLAGS -g -W -Wall",
  	#CFLAGS="$CFLAGS -Waggregate-return"
  	#CFLAGS="$CFLAGS -Wcast-align -Wcast-qual -Wnested-externs"
  	#CFLAGS="$CFLAGS -Wshadow -Wbad-function-cast -Wwrite-strings"
	AC_MSG_RESULT(no)
)

dnl os specific flags
case "$host_os" in
  OSF*)
    AC_DEFINE(OSF1, 1)
    ;;
  Sun*)
    AC_DEFINE(SOLARIS, 1)
    LIBS="-lresolv -lsocket -lnsl ${LIBS}"
    ;;
  IRIX*)
    AC_DEFINE(IRIX, 1)
    ;;
esac

AC_CHECK_PROG(MAKE, gmake, gmake)
if test x"$MAKE" = x""; then
  AC_CHECK_PROG(MAKE, make, make)
fi
AC_SUBST(MAKE)
AC_PROG_MAKE_SET

dnl some C compilers (ex. MipsPRO) don't know how to parse the 'inline' keyword
AC_MSG_CHECKING(for static inline)
AC_TRY_COMPILE([#include <stdio.h>]

static inline func()
{
}
,
[
  func();
],
[AC_MSG_RESULT(yes)], [AC_MSG_RESULT(no); AC_DEFINE(NOINLINE, 1)])

AC_MSG_CHECKING([whether to enable mmap()])
AC_ARG_ENABLE(mmap,
	[  --enable-mmap                    enable mmap() shared memory],
	AC_MSG_RESULT(yes)
	AC_CHECK_FUNCS(mmap),
	AC_MSG_RESULT(no)
)

AC_ARG_WITH(pcap-includes,
  [  --with-pcap-includes=DIR         Search the specified directories for header files],
  [INCLUDES="${INCLUDES} -I$withval"
  PCAPINCLS=$withval
  PCAPINCLUDESFOUND=1
  ])

if test x"$PCAPINCLS" != x""; then
  AC_MSG_CHECKING(your own pcap includes)
  if test -r $PCAPINCLS/pcap.h; then 
    AC_MSG_RESULT(ok)
    AC_DEFINE(HAVE_PCAP_H, 1)
  else
    AC_MSG_RESULT(no)
    AC_MSG_ERROR(ERROR: missing pcap.h in $PCAPINCLS) 
  fi
fi

if test x"$PCAPINCLUDESFOUND" = x""; then
  AC_MSG_CHECKING([default locations for pcap.h])
  if test -r /usr/include/pcap.h; then
    AC_MSG_RESULT([found in /usr/include])
    PCAPINCLUDESFOUND=1
    AC_DEFINE(HAVE_PCAP_H, 1)
  elif test -r /usr/include/pcap/pcap.h; then
    AC_MSG_RESULT([found in /usr/include])
    PCAPINCLUDESFOUND=1
    AC_DEFINE(HAVE_PCAP_PCAP_H, 1)
  elif test -r /usr/local/include/pcap.h; then
    AC_MSG_RESULT([found in /usr/local/include])
    INCLUDES="${INCLUDES} -I/usr/local/include"
    PCAPINCLUDESFOUND=1
    AC_DEFINE(HAVE_PCAP_H, 1) 
  elif test -r /usr/local/include/pcap/pcap.h; then
    AC_MSG_RESULT([found in /usr/local/include])
    INCLUDES="${INCLUDES} -I/usr/local/include"
    PCAPINCLUDESFOUND=1
    AC_DEFINE(HAVE_PCAP_PCAP_H, 1)
  fi
  if test x"$PCAPINCLUDESFOUND" = x""; then
    AC_MSG_RESULT([not found])
    AC_MSG_ERROR(ERROR: missing pcap.h)
  fi
fi

AC_ARG_WITH(pcap-libs,
  [  --with-pcap-libs=DIR             Search the specified directories for libraries],
  [LIBS="${LIBS} -L$withval"
  PCAPLIB=$withval
  PCAPLIBFOUND=1])

if test x"$PCAPLIB" != x""; then
  AC_MSG_CHECKING(your own pcap libraries)
  if test -r $PCAPLIB/libpcap.a -o -r $PCAPLIB/libpcap.so; then
    AC_MSG_RESULT(ok)
    PCAP_LIB_FOUND=1
  else
    AC_MSG_RESULT(no)
    AC_MSG_ERROR(ERROR: unable to find pcap library in $PCAPLIB)
  fi
fi

if test x"$PCAPLIBFOUND" = x""; then
  AC_MSG_CHECKING([default locations for libpcap])
  if test -r /usr/local/lib/libpcap.a -o -r /usr/local/lib/libpcap.so; then
    LIBS="${LIBS} -L/usr/local/lib"
    AC_MSG_RESULT([found in /usr/local/lib])
    PCAPLIBFOUND=1
  else
    AC_MSG_RESULT(no)
  fi
fi

dnl Checks for libraries.
AC_CHECK_LIB([pcap], [pcap_dispatch], [], [AC_MSG_ERROR([
  ERROR: missing pcap library. Refer to: http://www.tcpdump.org/
])])

AC_CHECK_LIB([pcap], [pcap_setnonblock], [ AC_DEFINE(PCAP_7, 1) ], [])

dnl packet capture type check; taken from libpcap.
AC_MSG_CHECKING(packet capture type)
if test -r /dev/bpf0 ; then
        V_PCAP=bpf
elif test -r /usr/include/net/pfilt.h ; then
        V_PCAP=pf
elif test -r /dev/enet ; then
        V_PCAP=enet
elif test -r /dev/nit ; then
        V_PCAP=snit
elif test -r /usr/include/sys/net/nit.h ; then
        V_PCAP=nit
elif test -r /usr/include/linux/socket.h ; then
        V_PCAP=linux
elif test -r /usr/include/net/raw.h ; then
        V_PCAP=snoop
elif test -r /usr/include/odmi.h ; then
        #
        # On AIX, the BPF devices might not yet be present - they're
        # created the first time libpcap runs after booting.
        # We check for odmi.h instead.
        #
        V_PCAP=bpf
elif test -r /usr/include/sys/dlpi.h ; then
        V_PCAP=dlpi
elif test -c /dev/bpf0 ; then           # check again in case not readable
        V_PCAP=bpf
elif test -c /dev/enet ; then           # check again in case not readable
        V_PCAP=enet
elif test -c /dev/nit ; then            # check again in case not readable
        V_PCAP=snit
else
        V_PCAP=null
fi
AC_MSG_RESULT($V_PCAP)
AC_DEFINE_UNQUOTED(PCAP_TYPE_$V_PCAP, 1)

dnl start: mysql handling
AC_MSG_CHECKING(whether to enable MySQL support)
AC_ARG_ENABLE(mysql,
  [  --enable-mysql                   Enable MySQL support],
  [ case "$enableval" in
  yes)
    AC_MSG_RESULT(yes)
    USING_SQL="yes"

    AC_ARG_WITH(mysql-libs,
      [  --with-mysql-libs=DIR            Search for MySQL libs in the specified directory],
      [LIBS="${LIBS} -L$withval"
      MYSQLLIB=$withval
      MYSQLLIBFOUND=1]) 

    if test x"$MYSQLLIB" != x""; then
      AC_MSG_CHECKING(your own MySQL client library)
      if test -r $MYSQLLIB/libmysqlclient.a -o -r $MYSQLLIB/libmysqlclient.so; then
        AC_MSG_RESULT(ok)
      else
        AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing MySQL client library in $MYSQLLIB)
      fi
    fi

    if test x"$MYSQLLIBFOUND" = x""; then
      AC_MSG_CHECKING([default locations for libmysqlclient])
      if test -r /usr/lib/mysql/libmysqlclient.a -o -r /usr/lib/mysql/libmysqlclient.so; then
	LIBS="${LIBS} -L/usr/lib/mysql"
	AC_MSG_RESULT([found in /usr/lib/mysql])
	MYSQLLIBFOUND=1
      elif test -r /usr/local/mysql/lib/libmysqlclient.a -o -r /usr/local/mysql/lib/libmysqlclient.so; then
	LIBS="${LIBS} -L/usr/local/mysql/lib"
	AC_MSG_RESULT([found in /usr/local/mysql/lib])
	MYSQLLIBFOUND=1
      elif test -r /usr/local/lib/mysql/libmysqlclient.a -o -r /usr/local/lib/mysql/libmysqlclient.so; then
	LIBS="${LIBS} -L/usr/local/lib/mysql"
	AC_MSG_RESULT([found in /usr/local/lib/mysql])
	MYSQLLIBFOUND=1
      else 
        AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$MYSQLLIBFOUND" = x""; then
      AC_CHECK_LIB([mysqlclient], [mysql_real_connect], [], [AC_MSG_ERROR([
        ERROR: missing MySQL client library. Refer to: http://www.mysql.com/
      ])])
    else 
      LIBS="${LIBS} -lmysqlclient"
    fi 

    AC_ARG_WITH(mysql-includes,
      [  --with-mysql-includes=DIR        Search for MySQL includes in the specified directory],
      [INCLUDES="${INCLUDES} -I$withval"
      MYSQLINCLUDES=$withval
      MYSQLINCLUDESFOUND=1])

    if test x"$MYSQLINCLUDES" != x""; then
      AC_MSG_CHECKING(your own MySQL headers)
      if test -r $MYSQLINCLUDES/mysql/mysql.h; then
        AC_MSG_RESULT(ok)
      else
	AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing MySQL headers in $MYSQLINCLUDES)
      fi
    fi

    if test x"$MYSQLINCLUDESFOUND" = x""; then 
      AC_MSG_CHECKING([default locations for mysql.h])
      if test -r /usr/include/mysql/mysql.h; then
	AC_MSG_RESULT([found in /usr/include/mysql])
	MYSQLINCLUDESFOUND=1;
      elif test -r /usr/local/include/mysql/mysql.h; then
	INCLUDES="${INCLUDES} -I/usr/local/include"
	AC_MSG_RESULT([found in /usr/local/include/mysql])
	MYSQLINCLUDESFOUND=1;
      fi
      if test x"$MYSQLINCLUDESFOUND" = x""; then
	AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$MYSQLINCLUDESFOUND" = x""; then
      AC_CHECK_HEADER([mysql/mysql.h],,
      [AC_MSG_ERROR(ERROR: missing MySQL headers)])      
    fi

    AC_DEFINE(WITH_MYSQL, 1)
    PLUGINS="${PLUGINS} mysql_plugin.c"
    EXTRABIN="${EXTRABIN} pmmyplay" 
    ;;
  no)
    AC_MSG_RESULT(no)
    ;;
  esac ],
AC_MSG_RESULT(no))
dnl finish: mysql handling

dnl start: pgsql handling
AC_MSG_CHECKING(whether to enable PostgreSQL support)
AC_ARG_ENABLE(pgsql,
  [  --enable-pgsql                   Enable PostgreSQL support],
  [ case "$enableval" in
  yes)
    AC_MSG_RESULT(yes)
    USING_SQL="yes"

    AC_ARG_WITH(pgsql-libs,
      [  --with-pgsql-libs=DIR            Search for PostgreSQL libs in the specified directory],
      [LIBS="${LIBS} -L$withval"
      PGSQLLIB=$withval
      PGSQLLIBFOUND=1]) 

    if test x"$PGSQLLIB" != x""; then
      AC_MSG_CHECKING(your own PostgreSQL client library)
      if test -r $PGSQLLIB/libpq.a -o -r $PGSQLLIB/libpq.so; then
        AC_MSG_RESULT(ok)
      else
        AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing PostgreSQL client library in $PGSQLLIB)
      fi
    fi

    if test x"$PGSQLLIBFOUND" = x""; then
      AC_MSG_CHECKING([default locations for libpq])
      if test -r /usr/lib/libpq.a -o -r /usr/lib/libpq.so; then
        AC_MSG_RESULT([found in /usr/lib])
        PGSQLLIBFOUND=1
      elif test -r /usr/local/lib/libpq.a -o -r /usr/local/lib/libpq.so; then
	LIBS="${LIBS} -L/usr/local/lib"
	AC_MSG_RESULT([found in /usr/local/lib])
	PGSQLLIBFOUND=1
      elif test -r /usr/local/pgsql/lib/libpq.a -o -r /usr/local/pgsql/lib/libpq.so; then
	LIBS="${LIBS} -L/usr/local/pgsql/lib"
	AC_MSG_RESULT([found in /usr/local/pgsql/lib])
	PGSQLLIBFOUND=1
      else 
        AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$PGSQLLIBFOUND" = x""; then
      AC_CHECK_LIB([pq], [PQconnectdb], [], [AC_MSG_ERROR([
        ERROR: missing PQ library. Refer to: http://www.postgresql.org/
      ])])
    else 
      LIBS="${LIBS} -lpq"
    fi 

    AC_ARG_WITH(pgsql-includes,
      [  --with-pgsql-includes=DIR        Search for PostgreSQL includes in the specified directory],
      [INCLUDES="${INCLUDES} -I$withval"
      PGSQLINCLUDES=$withval
      PGSQLINCLUDESFOUND=1])

    if test x"$PGSQLINCLUDES" != x""; then
      AC_MSG_CHECKING(your own PostgreSQL headers)
      if test -r $PGSQLINCLUDES/libpq-fe.h; then
        AC_MSG_RESULT(ok)
      else
	AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing pgsql headers in $PGSQLINCLUDES)
      fi
    fi

    if test x"$PGSQLINCLUDESFOUND" = x""; then 
      AC_MSG_CHECKING([default locations for libpq-fe.h])
      if test -r /usr/include/libpq-fe.h; then
	AC_MSG_RESULT([found in /usr/include])
	PGSQLINCLUDESFOUND=1;
      elif test -r /usr/local/include/libpq-fe.h; then
        AC_MSG_RESULT([found in /usr/local/include])
        INCLUDES="${INCLUDES} -I/usr/local/include"
        PGSQLINCLUDESFOUND=1;
      elif test -r /usr/local/pgsql/include/libpq-fe.h; then
	AC_MSG_RESULT([found in /usr/local/pgsql/include])
	INCLUDES="${INCLUDES} -I/usr/local/pgsql/include"
	PGSQLINCLUDESFOUND=1;
      fi
      if test x"$PGSQLINCLUDESFOUND" = x""; then
	AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$PGSQLINCLUDESFOUND" = x""; then
      AC_CHECK_HEADER([libpq-fe.h],,
      [AC_MSG_ERROR(ERROR: missing PostgreSQL headers)])      
    fi

    AC_DEFINE(WITH_PGSQL, 1)
    PLUGINS="${PLUGINS} pgsql_plugin.c"
    EXTRABIN="${EXTRABIN} pmpgplay" 
    ;;
  no)
    AC_MSG_RESULT(no)
    ;;
  esac ],
AC_MSG_RESULT(no))
dnl finish: pgsql handling
  
  if test x"$USING_SQL" = x"yes"; then
    PLUGINS="${PLUGINS} sql_handlers.c"
    LIBS="${LIBS} -lm -lz"
  fi

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([getopt.h sys/select.h sys/time.h])

dnl Checks for typedefs, structures, and compiler characteristics.

dnl Checks for library functions.
AC_TYPE_SIGNAL

dnl AC_CHECK_FUNCS(inet_ntoa socket)
AC_CHECK_FUNCS([inet_ntoa socket])

dnl final checks
dnl trivial solution to portability issue 
CFLAGS="${CFLAGS} ${INCLUDES}"
INCLUDES=""

case "$host_os" in
  IRIX*)
    LIBS="${LIBS} -lgen"
    ;;
esac

echo "
PLATFORM ..... : `uname -m`
OS ........... : `uname -rs` (`uname -n`)
COMPILER ..... : ${CC}
CFLAGS ....... : ${CFLAGS}
LIBS ......... : ${LIBS}
LDFLAGS ...... : ${LDFLAGS}

Ok. I have done with all.
Type 'make' to compile.
"
AC_SUBST([PLUGINS])
AC_SUBST([EXTRABIN])
AC_OUTPUT([Makefile])
